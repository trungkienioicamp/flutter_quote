import 'dart:convert';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

// This file is generated by your tool/make_quotes.dart script
// Shape: const List<Map<String, String>> localQuotes = [{"text":"...","author":"..."}, ...];
import 'quotes.dart';

void main() => runApp(const QuoteApp());

class QuoteApp extends StatelessWidget {
  const QuoteApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Random Quote',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.indigo),
        useMaterial3: true,
      ),
      home: const QuoteScreen(),
      debugShowCheckedModeBanner: false,
    );
  }
}

class Quote {
  final String content;
  final String author;
  final String source; // "ZenQuotes" | "Quotable" | "Local"
  const Quote(this.content, this.author, this.source);
}

class QuoteService {
  final _rng = Random();
  final List<Quote> _pool = [];

  // simple client-side cooldown to avoid 429s from rapid taps
  DateTime _nextAllowed = DateTime.fromMillisecondsSinceEpoch(0);
  final Duration _minInterval = const Duration(seconds: 2);

  Future<Quote> next() async {
    final now = DateTime.now();
    if (now.isBefore(_nextAllowed)) {
      throw _Cooldown(_nextAllowed.difference(now));
    }
    _nextAllowed = now.add(_minInterval);

    // Serve from the pool if any are buffered
    if (_pool.isNotEmpty) return _pool.removeAt(0);

    // Try to refill the pool: ZenQuotes -> Quotable
    try {
      await _refillFromZenQuotes(); // ~50 items
    } catch (_) {
      try {
        await _refillFromQuotable(); // ~30 items
      } catch (_) {
        // ignore; we'll use local fallback below
      }
    }

    if (_pool.isNotEmpty) return _pool.removeAt(0);

    // Final fallback: pick from localQuotes (maps) and convert to Quote
    final m = localQuotes[_rng.nextInt(localQuotes.length)];
    return Quote(m['text'] ?? '', (m['author']?.isEmpty ?? true) ? 'Unknown' : m['author']!, 'Local');
  }

  Future<void> _refillFromZenQuotes() async {
    final res = await http
        .get(Uri.parse('https://zenquotes.io/api/quotes'))
        .timeout(const Duration(seconds: 12));

    if (res.statusCode == 429) throw Exception('rate-limited');
    if (res.statusCode != 200) throw Exception('server ${res.statusCode}');

    final list = jsonDecode(res.body) as List<dynamic>;
    for (final e in list) {
      final m = e as Map<String, dynamic>;
      final q = (m['q'] ?? '').toString().trim();
      if (q.isEmpty) continue;
      final a = (m['a'] ?? 'Unknown').toString().trim();
      _pool.add(Quote(q, a.isEmpty ? 'Unknown' : a, 'ZenQuotes'));
    }
  }

  Future<void> _refillFromQuotable() async {
    final res = await http
        .get(Uri.parse('https://api.quotable.io/quotes/random?limit=30'))
        .timeout(const Duration(seconds: 12));

    if (res.statusCode != 200) throw Exception('server ${res.statusCode}');

    final list = jsonDecode(res.body) as List<dynamic>;
    for (final e in list) {
      final m = e as Map<String, dynamic>;
      final q = (m['content'] ?? '').toString().trim();
      if (q.isEmpty) continue;
      final a = (m['author'] ?? 'Unknown').toString().trim();
      _pool.add(Quote(q, a.isEmpty ? 'Unknown' : a, 'Quotable'));
    }
  }
}

class QuoteScreen extends StatefulWidget {
  const QuoteScreen({super.key});
  @override
  State<QuoteScreen> createState() => _QuoteScreenState();
}

class _QuoteScreenState extends State<QuoteScreen> {
  final _svc = QuoteService();
  Quote? _quote;
  bool _loading = true;
  String? _hintMessage; // show small hint (cooldown, network msg, etc.)

  @override
  void initState() {
    super.initState();
    _getNext(firstLoad: true);
  }

  Future<void> _getNext({bool firstLoad = false}) async {
    setState(() {
      _loading = true;
      if (!firstLoad) _hintMessage = null;
    });

    try {
      final q = await _svc.next();
      setState(() => _quote = q);
    } on _Cooldown catch (c) {
      final secs = c.remaining.inSeconds.clamp(1, 9);
      setState(() => _hintMessage = 'Easy ðŸ™‚ Try again in ~${secs}s');
      // Keep showing the current quote; no change.
    } catch (_) {
      // Network error: show a local quote immediately
      final m = localQuotes[Random().nextInt(localQuotes.length)];
      setState(() {
        _hintMessage = 'Network issue â€” showing a local quote.';
        _quote = Quote(m['text'] ?? '', (m['author']?.isEmpty ?? true) ? 'Unknown' : m['author']!, 'Local');
      });
    } finally {
      if (mounted) setState(() => _loading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    final body = _loading
        ? const Center(child: CircularProgressIndicator())
        : _quote == null
            ? _EmptyState(onRetry: _getNext)
            : _QuoteView(quote: _quote!, onNew: _getNext, hint: _hintMessage);

    return Scaffold(
      appBar: AppBar(title: const Text('Random Quote'), centerTitle: true),
      body: SafeArea(
        child: AnimatedSwitcher(
          duration: const Duration(milliseconds: 250),
          child: body,
        ),
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: _loading ? null : _getNext,
        icon: const Icon(Icons.shuffle),
        label: const Text('New Quote'),
      ),
      bottomNavigationBar: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
        child: Text(
          'Quotes via ZenQuotes & Quotable â€¢ Local fallback enabled',
          textAlign: TextAlign.center,
          style: Theme.of(context).textTheme.bodySmall,
        ),
      ),
    );
  }
}

class _QuoteView extends StatelessWidget {
  final Quote quote;
  final VoidCallback onNew;
  final String? hint;

  const _QuoteView({required this.quote, required this.onNew, this.hint});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    return Center(
      child: SingleChildScrollView(
        padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
        child: Column(
          key: const ValueKey('quote'),
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            if (hint != null) ...[
              Text(hint!,
                  textAlign: TextAlign.center,
                  style: theme.textTheme.bodySmall?.copyWith(
                    color: theme.colorScheme.tertiary,
                  )),
              const SizedBox(height: 8),
            ],
            const Icon(Icons.format_quote, size: 48),
            const SizedBox(height: 12),
            Text(
              quote.content,
              textAlign: TextAlign.center,
              style: theme.textTheme.headlineSmall?.copyWith(
                fontStyle: FontStyle.italic,
                height: 1.4,
              ),
            ),
            const SizedBox(height: 16),
            Text(
              'â€” ${quote.author}',
              textAlign: TextAlign.center,
              style: theme.textTheme.titleMedium,
            ),
            const SizedBox(height: 8),
            Text('source: ${quote.source}',
                style: theme.textTheme.bodySmall?.copyWith(
                  color: theme.colorScheme.onSurfaceVariant,
                )),
          ],
        ),
      ),
    );
  }
}

class _EmptyState extends StatelessWidget {
  final VoidCallback onRetry;
  const _EmptyState({required this.onRetry});

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.wifi_off, size: 48),
            const SizedBox(height: 12),
            Text('No quote yet', style: Theme.of(context).textTheme.titleLarge),
            const SizedBox(height: 8),
            Text(
              'Tap below to try again â€” weâ€™ll use online sources or fall back to local quotes.',
              textAlign: TextAlign.center,
            ),
            const SizedBox(height: 16),
            FilledButton.icon(
              onPressed: onRetry,
              icon: const Icon(Icons.refresh),
              label: const Text('Try again'),
            ),
          ],
        ),
      ),
    );
  }
}

class _Cooldown implements Exception {
  final Duration remaining;
  _Cooldown(this.remaining);
}
